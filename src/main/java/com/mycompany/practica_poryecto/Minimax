public class Minimax {
    // Calcula la utilidad del nodo considerando las filas, columnas y diagonales
   public static double utility(Node node, TresPiece player) {
    TotalBoard board = node.getBoard();
    
    // Si el tablero tiene un ganador, asigna una utilidad de +1 o -1 según el jugador
    if (board.isWin()) {
        if (board.getWinner() == player) {
            return 1; // El jugador ha ganado
        } else {
            return -1; // El oponente ha ganado
        }
    }
    
    // Si es empate, la utilidad es 0
    if (board.isDraw()) {
        return 0;
    }
    
    // Si el juego aún no ha terminado, asigna una utilidad basada en el número de líneas posibles
    return evaluateBoard(board, player);
   }
    // Evaluar el tablero considerando filas, columnas y diagonales
    private static double evaluateBoard(TotalBoard board, TresPiece player) {
        double score = 0;
        for (int i = 0; i < 3; i++) {
            score += evaluateLine(board, i, 0, 0, 1, player); // Filas
            score += evaluateLine(board, 0, i, 1, 0, player); // Columnas
        }
        score += evaluateLine(board, 0, 0, 1, 1, player); // Diagonal principal
        score += evaluateLine(board, 0, 2, 1, -1, player); // Diagonal secundaria
        
        return score;
    }

    // Evaluar una línea (fila, columna o diagonal) y asignar una puntuación basada en el número de piezas del jugador
    private static double evaluateLine(TotalBoard board, int startX, int startY, int dx, int dy, TresPiece player) {
        int playerCount = 0;
        int opponentCount = 0;

        for (int i = 0; i < 3; i++) {
            TresPiece piece = board.getPiece(startX + i * dx, startY + i * dy);
            if (piece == player) {
                playerCount++;
            } else if (piece != null) {
                opponentCount++;
            }
        }

        if (playerCount == 3) {
            return 1; // Ganó el jugador
        } else if (opponentCount == 3) {
            return -1; // Ganó el oponente
        } else {
            return playerCount; // Puntuación basada en el número de piezas del jugador
        }
    }

    // Método para encontrar el mejor movimiento utilizando Minimax
    public static Integer findBestMove(Node node, int depth) {
    LinkedList<Node> possibleStates = node.generatePossibleStates();
    double bestValue = Double.NEGATIVE_INFINITY;
    Integer bestMove = null;

    for (Node child : possibleStates) {
        double moveValue = minimax(child, depth - 1, false);
        if (moveValue > bestValue) {
            bestValue = moveValue;
            bestMove = child.getMoveIndex();
        }
    }
    return bestMove;
}

    // Implementación del algoritmo Minimax
    private static double minimax(Node node, int depth, boolean isMaximizing) {
        double score = utility(node, isMaximizing ? node.getTurn() : node.getTurn().opposite());

        if (score == 1 || score == -1 || node.getBoard().isDraw() || depth == 0) {
            return score;
        }

        if (isMaximizing) {
            double bestValue = Double.NEGATIVE_INFINITY;
            for (Node child : node.generatePossibleStates()) {
                bestValue = Math.max(bestValue, minimax(child, depth - 1, false));
            }
            return bestValue;
        } else {
            double bestValue = Double.POSITIVE_INFINITY;
            for (Node child : node.generatePossibleStates()) {
                bestValue = Math.min(bestValue, minimax(child, depth - 1, true));
            }
            return bestValue;
        }
    }
}
